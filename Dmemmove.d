/*
Boost Software License - VeRSIon 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHalL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEalINGS IN THE SOFTWARE.
*/

import core.stdc.string: memmove;
import core.stdc.string;
import S_struct;
import std.traits;


bool isPowerOf2(T)(T x)
    if (isIntegral!T)
{
    return (x != 0) && ((x & (x - 1)) == 0);
}

void Cmemcpy(T)(T *dst, const T *src)
{
    pragma(inline, true)
    memcpy(dst, src, T.sizeof);
}

void Dmemcpy(T)(T *dst, const T *src)
    if (isScalarType!T)
{
    pragma(inline, true)
    *dst = *src;
}

// This implementation handles type sizes that are not powers of 2
// This implementation can't be @safe because it does pointer arithmetic
void DmemcpyUnsafe(T)(T *dst, const T *src) @trusted
   if (is(T == struct))
{
    import core.bitop: bsr;
    
    static assert(T.sizeof != 0);
    enum prevPowerOf2 = 1LU << bsr(T.sizeof);
    alias TRemainder = S!(T.sizeof - prevPowerOf2);
    auto s = cast(const S!prevPowerOf2*)(src);
    auto d = cast(S!prevPowerOf2*)(dst);
    static if (T.sizeof < 31) {
        pragma(inline, true);
        Dmemcpy(d, s);
        Dmemcpy(cast(TRemainder*)(d + 1), cast(const TRemainder*)(s + 1));
    } else {
        Dmemcpy(d, s);
        Dmemcpy(cast(TRemainder*)(d + 1), cast(const TRemainder*)(s + 1));
    }
}

extern(C) void Dmemcpy_small(void *d, const(void) *s, size_t n) {
    asm pure nothrow @nogc {
        naked;
        vmovdqu YMM0, [RSI];
        vmovdqu YMM1, [RSI+0x20];
        vmovdqu [RDI], YMM0;
        vmovdqu [RDI+0x20], YMM1;
        sub     RDX, 0x40;
        add     RSI, RDX;
        add     RDI, RDX;
        vmovdqu YMM0, [RSI];
        vmovdqu YMM1, [RSI+0x20];
        vmovdqu [RDI], YMM0;
        vmovdqu [RDI+0x20], YMM1;
        ret;
    }
}

extern(C) void Dmemcpy_large(void *d, const(void) *s, size_t n) {
    // NOTE(stefanos): Alternative - Reach 64-byte
    // (cache-line) alignment and use rep movsb
    // Good for bigger sizes and only for Intel.
    /*
    pragma(inline, false)
    asm pure nothrow @nogc
    {
        mov     RCX, T.sizeof;
        mov     EDX, ESI;                       // save `src`
        and     EDX, 0x3f;                      // mod = src % 64
        je      L5;
        vmovdqu  YMM0, [RSI];
        vmovdqu  YMM1, [RSI+0x20];
        vmovdqu  [RDI], YMM0;
        vmovdqu  [RDI+0x20], YMM1;
        mov    RAX, 0x40;
        sub    RAX, RDX;
        //cdqe   ;
        // src += %t0
        add    RSI, RAX;
        // dst += %t0
        add    RDI, RAX;
        // n -= %t0
        sub    RCX, RAX;
    L5:
        cld;
        rep;
        movsb;
    }
    return;
    */
    
    pragma(inline, false)
    asm pure nothrow @nogc {
        naked;
        mov    ECX, ESI;                       // save `src`
        and    ECX, 0x1f;                      // mod = src % 32
        je     L4;
        // if (mod) -> copy enough bytes to reach 32-byte alignment
        vmovdqu YMM0, [RSI];
        vmovdqu [RDI], YMM0;
        // %t0 = 32 - mod
        mov    RAX, 0x20;
        sub    RAX, RCX;
        //cdqe   ;
        // src += %t0
        add    RSI, RAX;
        // dst += %t0
        add    RDI, RAX;
        // n -= %t0
        sub    RDX, RAX;
    align 16;
    L4:
        // Because of the above, (at least) the loads
        // are 32-byte aligned.
        vmovdqu YMM0, [RSI];
        vmovdqu YMM1, [RSI+0x20];
        vmovdqu YMM2, [RSI+0x40];
        vmovdqu YMM3, [RSI+0x60];
        vmovdqu [RDI], YMM0;
        vmovdqu [RDI+0x20], YMM1;
        vmovdqu [RDI+0x40], YMM2;
        vmovdqu [RDI+0x60], YMM3;
        // src += 128;
        add    RSI, 128;
        // dst += 128;
        add    RDI, 128;
        // n -= 128;
        sub    RDX, 128;
        // if (n >= 128) loop
        cmp    RDX, 128;
        jge    L4;
    L2:
        test   RDX, RDX;
        je     L3;
        // if (n != 0)  -> copy the remaining <= 128 bytes
        vmovdqu YMM0, [RSI];
        vmovdqu YMM1, [RSI+0x20];
        vmovdqu [RDI], YMM0;
        vmovdqu [RDI+0x20], YMM1;
        sub     RDX, 0x40;
        add     RSI, RDX;
        add     RDI, RDX;
        vmovdqu YMM0, [RSI];
        vmovdqu YMM1, [RSI+0x20];
        vmovdqu [RDI], YMM0;
        vmovdqu [RDI+0x20], YMM1;
    L3:
        vzeroupper;
        ret;
    }
}


pragma(inline, true)
void Dmemcpy(T)(T *dst, const T *src)
    if (is(T == struct))
{
    static if (T.sizeof == 1)
    {
        pragma(inline, true)
        Dmemcpy(cast(ubyte*)(dst), cast(const ubyte*)(src));
        return;
    }
    else static if (T.sizeof == 2)
    {
        pragma(inline, true)
        Dmemcpy(cast(ushort*)(dst), cast(const ushort*)(src));
        return;
    }
    else static if (T.sizeof == 4)
    {
        pragma(inline, true)
        Dmemcpy(cast(uint*)(dst), cast(const uint*)(src));
        return;
    }
    else static if (T.sizeof == 8)
    {
        pragma(inline, true)
        Dmemcpy(cast(ulong*)(dst), cast(const ulong*)(src));
        return;
    }
    else static if (T.sizeof == 16)
    {
        version(D_SIMD)
        {
            pragma(inline, true)
            pragma(msg, "SIMD ", T);
            import core.simd: void16, storeUnaligned, loadUnaligned;
            storeUnaligned(cast(void16*)(dst), loadUnaligned(cast(const void16*)(src)));
        }
        else
        {
            //pragma(inline, true)
            static foreach(i; 0 .. T.sizeof/8)
            {
                Dmemcpy((cast(ulong*)dst) + i, (cast(const long*)src) + i);
            }
        }

        return;
    }
    else static if (T.sizeof == 32)
    {
        //pragma(inline, true)
        static foreach(i; 0 .. T.sizeof/16)
        {
            Dmemcpy((cast(S!16*)dst) + i, (cast(const S!16*)src) + i);
        }
        return;
    }
    else static if (T.sizeof < 64 && !isPowerOf2(T.sizeof))
    {
        pragma(inline, true)
        DmemcpyUnsafe(dst, src);
        return;
    }
    else static if (T.sizeof == 64) {
        Dmemcpy(cast(S!32*)dst, cast(const S!32*)src) ;
        Dmemcpy((cast(S!32*)dst) + 1, (cast(const S!32*)src) + 1);
    }
    else static if (T.sizeof < 256) {
        pragma(inline, true);
        Dmemcpy_small(dst, src, T.sizeof);       
    }
    else
    {
        pragma(inline, true);
        Dmemcpy_large(dst, src, T.sizeof);       
    }
}

void Cmemmove(T)(T *dst, const T *src)
{
    pragma(inline, true)
    memmove(dst, src, T.sizeof);
}

// IMPORTANT(stefanos): memmove is supposed to return the dest
void Dmemmove(void *d, const(void) *s, size_t n)
{
    import core.stdc.stdio: printf;
    import core.simd: void16, void32, loadUnaligned, storeUnaligned;

    if (n < 64) {
        if (n & 32) {
            n -= 32;
            storeUnaligned(cast(void16*)(d+n+16), loadUnaligned(cast(const void16*)(s+n+16)));
            storeUnaligned(cast(void16*)(d+n), loadUnaligned(cast(const void16*)(s+n)));
        }
        if (n & 16) {
            n -= 16;
            storeUnaligned(cast(void16*)(d+n), loadUnaligned(cast(const void16*)(s+n)));
        }
        if (n & 8) {
            n -= 8;
            *(cast(ulong*)(d+n)) = *(cast(const ulong*)(s+n));
        }
        if (n & 4) {
            n -= 4;
            *(cast(uint*)(d+n)) = *(cast(const uint*)(s+n));
        }
        if (n & 2) {
            n -= 2;
            *(cast(ushort*)(d+n)) = *(cast(const ushort*)(s+n));
        }
        if (n & 1) {
            *(cast(ubyte*)d) = *(cast(const ubyte*)s);
        }
        return;
    }
    s += n;
    d += n;
    if (n < 128) {
        storeUnaligned(cast(void16*)(d-0x10), loadUnaligned(cast(const void16*)(s-0x10)));
        storeUnaligned(cast(void16*)(d-0x20), loadUnaligned(cast(const void16*)(s-0x20)));
        storeUnaligned(cast(void16*)(d-0x30), loadUnaligned(cast(const void16*)(s-0x30)));
        storeUnaligned(cast(void16*)(d-0x40), loadUnaligned(cast(const void16*)(s-0x40)));
        n -= 64;
        s = s - n;
        d = d - n;
        storeUnaligned(cast(void16*)(d-0x10), loadUnaligned(cast(const void16*)(s-0x10)));
        storeUnaligned(cast(void16*)(d-0x20), loadUnaligned(cast(const void16*)(s-0x20)));
        storeUnaligned(cast(void16*)(d-0x30), loadUnaligned(cast(const void16*)(s-0x30)));
        storeUnaligned(cast(void16*)(d-0x40), loadUnaligned(cast(const void16*)(s-0x40)));
        return;
    }
    uint mod = cast(ulong)d & 31;
    if (mod) {
        storeUnaligned(cast(void16*)(d-0x10), loadUnaligned(cast(const void16*)(s-0x10)));
        storeUnaligned(cast(void16*)(d-0x20), loadUnaligned(cast(const void16*)(s-0x20)));
        s -= mod;
        d -= mod;
        n -= mod;
    }
    while (n >= 128) {
        *(cast(void32*)(d-0x20)) = *(cast(const void32*)(s-0x20));
        *(cast(void32*)(d-0x40)) = *(cast(const void32*)(s-0x40));
        *(cast(void32*)(d-0x60)) = *(cast(const void32*)(s-0x60));
        *(cast(void32*)(d-0x80)) = *(cast(const void32*)(s-0x80));
        s -= 128;
        d -= 128;
        n -= 128;
    }

    if (n) {
        *(cast(void32*)(d-0x20)) = *(cast(const void32*)(s-0x20));
        *(cast(void32*)(d-0x40)) = *(cast(const void32*)(s-0x40));
        n = -n + 0x40;
        s += n;
        d += n;
        storeUnaligned(cast(void16*)(d-16), loadUnaligned(cast(const void16*)(s-16)));
        storeUnaligned(cast(void16*)(d-32), loadUnaligned(cast(const void16*)(s-32)));
        storeUnaligned(cast(void16*)(d-48), loadUnaligned(cast(const void16*)(s-48)));
        storeUnaligned(cast(void16*)(d-64), loadUnaligned(cast(const void16*)(s-64)));
    }
}

void Dmemmove(T)(T *dst, const T *src) {
    void *d = dst;
    const void *s = src;
    if ((cast(ulong)d - cast(ulong)s) < T.sizeof) {
        Dmemmove(d, s, T.sizeof);
    } else {
        Dmemcpy(dst, src);
    }
}


/// DYNAMIC ///

void Cmemmove(T)( T[] dst, const  T[] src)
{
    assert(dst.length == src.length);
    pragma(inline, true)
    memmove(dst.ptr, src.ptr, dst.length * T.sizeof);
}

import core.stdc.stdio: printf;

void Dmemmove(T)( T[] dst, const  T[] src) {
    assert(dst.length == src.length);
    void *d = dst.ptr;
    const void *s = src.ptr;
    size_t n = dst.length * T.sizeof;
    if ((cast(ulong)d - cast(ulong)s) < n) {
        Dmemmove(d, s, n);
    } else {
        if (n < 256) {
            pragma(inline, true);
            Dmemcpy_small(d, s, n);
        } else {
            pragma(inline, true);
            Dmemcpy_large(d, s, n);
        }
    }
}
